{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jyoth\\\\Documents\\\\ReactApps\\\\CustumHooks2\\\\src\\\\components\\\\NewTask\\\\NewTask.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Section from \"../UI/Section\";\nimport TaskForm from \"./TaskForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTask = props => {\n  _s();\n\n  const transformTask = (data, taskData) => {\n    const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n\n    const createdTask = {\n      id: generatedId,\n      text: taskData\n    };\n    props.onAddTask(createdTask);\n  };\n\n  const {\n    error,\n    isLoading,\n    sendRequest\n  } = useHttp();\n\n  const enterTaskHandler = async taskText => {\n    sendRequest({\n      url: \"https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json\",\n      method: \"POST\",\n      body: {\n        text: taskText\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }, transformTask.bind(null, taskText));\n    /*  dataFromHook = taskText.slice();\n    console.log(dataFromHook); */\n  };\n  /*  setIsLoading(true);\n    setError(null);\n   \n    try {\n      const response = await fetch(\n        'https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json',\n        {\n          method: 'POST',\n          body: JSON.stringify({ text: taskText }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n       if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n       const data = await response.json();\n       const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n      const createdTask = { id: generatedId, text: taskText };\n       props.onAddTask(createdTask);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  }; */\n\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n      onEnterTask: enterTaskHandler,\n      loading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTask, \"vALwo7lYq3sGPtKIpwIuJzxELnw=\", false, function () {\n  return [useHttp];\n});\n\n_c = NewTask;\nexport default NewTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"sources":["C:/Users/jyoth/Documents/ReactApps/CustumHooks2/src/components/NewTask/NewTask.js"],"names":["useEffect","useState","Section","TaskForm","useHttp","NewTask","props","transformTask","data","taskData","generatedId","name","createdTask","id","text","onAddTask","error","isLoading","sendRequest","enterTaskHandler","taskText","url","method","body","headers","bind"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACxC,UAAMC,WAAW,GAAGF,IAAI,CAACG,IAAzB,CADwC,CACT;;AAC/B,UAAMC,WAAW,GAAG;AAAEC,MAAAA,EAAE,EAAEH,WAAN;AAAmBI,MAAAA,IAAI,EAAEL;AAAzB,KAApB;AAEAH,IAAAA,KAAK,CAACS,SAAN,CAAgBH,WAAhB;AACD,GALD;;AAOA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,MAAoCd,OAAO,EAAjD;;AAEA,QAAMe,gBAAgB,GAAG,MAAOC,QAAP,IAAoB;AAC3CF,IAAAA,WAAW,CACT;AACEG,MAAAA,GAAG,EAAE,oFADP;AAEEC,MAAAA,MAAM,EAAE,MAFV;AAGEC,MAAAA,IAAI,EAAE;AAAET,QAAAA,IAAI,EAAEM;AAAR,OAHR;AAIEI,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJX,KADS,EASTjB,aAAa,CAACkB,IAAd,CAAmB,IAAnB,EAAyBL,QAAzB,CATS,CAAX;AAWA;AACJ;AACG,GAdD;AAgBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAME,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,WAAW,EAAED,gBAAvB;AAAyC,MAAA,OAAO,EAAEF;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGD,KAAK,iBAAI;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA/DD;;GAAMX,O;UAQsCD,O;;;KARtCC,O;AAiEN,eAAeA,OAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport Section from \"../UI/Section\";\nimport TaskForm from \"./TaskForm\";\nimport useHttp from \"../hooks/use-http\";\nconst NewTask = (props) => {\n  const transformTask = (data, taskData) => {\n    const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n    const createdTask = { id: generatedId, text: taskData };\n\n    props.onAddTask(createdTask);\n  };\n\n  const { error, isLoading, sendRequest } = useHttp();\n\n  const enterTaskHandler = async (taskText) => {\n    sendRequest(\n      {\n        url: \"https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json\",\n        method: \"POST\",\n        body: { text: taskText },\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      },\n      transformTask.bind(null, taskText)\n    );\n    /*  dataFromHook = taskText.slice();\n    console.log(dataFromHook); */\n  };\n\n  /*  setIsLoading(true);\n    setError(null);\n   \n    try {\n      const response = await fetch(\n        'https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json',\n        {\n          method: 'POST',\n          body: JSON.stringify({ text: taskText }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n\n      const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n      const createdTask = { id: generatedId, text: taskText };\n\n      props.onAddTask(createdTask);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  }; */\n\n  return (\n    <Section>\n      <TaskForm onEnterTask={enterTaskHandler} loading={isLoading} />\n      {error && <p>{error}</p>}\n    </Section>\n  );\n};\n\nexport default NewTask;\n"]},"metadata":{},"sourceType":"module"}