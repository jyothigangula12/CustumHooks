{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = async taskText => {\n    setIsLoading(true);\n    setError(null);\n    const url = 'https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json';\n    const response = {};\n\n    try {\n      if (taskText) {\n        response = await fetch(url, {\n          method: 'POST',\n          body: JSON.stringify({\n            text: taskText\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      } else {\n        response = await fetch(url);\n      }\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return fetchTasks;\n};\n\n_s(useHttp, \"n5SlQVdc2sZg3OeT00ajYzBfpL0=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/jyoth/Documents/ReactApps/CustumHooks2/src/components/hooks/use-http.js"],"names":["useEffect","useState","useHttp","isLoading","setIsLoading","error","setError","tasks","setTasks","fetchTasks","taskText","url","response","fetch","method","body","JSON","stringify","text","headers","ok","Error","data","json","loadedTasks","taskKey","push","id","err","message"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMQ,UAAU,GAAG,MAAOC,QAAP,IAAoB;AACrCN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,UAAMK,GAAG,GAAG,oFAAZ;AACA,UAAMC,QAAQ,GAAG,EAAjB;;AACA,QAAI;AACA,UAAGF,QAAH,EAAY;AACPE,QAAAA,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EACnB;AACEG,UAAAA,MAAM,EAAE,MADV;AAEEC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,YAAAA,IAAI,EAAER;AAAR,WAAf,CAFR;AAGES,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT;AAHX,SADmB,CAAtB;AASJ,OAVD,MAWI;AACAP,QAAAA,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAtB;AACC;;AAGP,UAAI,CAACC,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AAEA,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,OAAX,IAAsBH,IAAtB,EAA4B;AAC1BE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeP,UAAAA,IAAI,EAAEI,IAAI,CAACG,OAAD,CAAJ,CAAcP;AAAnC,SAAjB;AACD;;AAEDV,MAAAA,QAAQ,CAACgB,WAAD,CAAR;AACD,KA9BD,CA8BE,OAAOI,GAAP,EAAY;AACZtB,MAAAA,QAAQ,CAACsB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDzB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvCD;;AAwCA,SAAOK,UAAP;AACD,CA9CD;;GAAMP,O;;AA+CN,eAAeA,OAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const fetchTasks = async (taskText) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    const url = 'https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json'\r\n    const response = {}\r\n    try {\r\n        if(taskText){\r\n             response = await fetch(url ,\r\n                {\r\n                  method: 'POST',\r\n                  body: JSON.stringify({ text: taskText }),\r\n                  headers: {\r\n                    'Content-Type': 'application/json',\r\n                  },\r\n                }\r\n              );\r\n        }\r\n        else{\r\n            response = await fetch(url)\r\n            }\r\n     \r\n          \r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      const loadedTasks = [];\r\n\r\n      for (const taskKey in data) {\r\n        loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n      }\r\n\r\n      setTasks(loadedTasks);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n  return fetchTasks\r\n};\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}