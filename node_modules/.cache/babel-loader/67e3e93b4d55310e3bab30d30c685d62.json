{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jyoth\\\\Documents\\\\ReactApps\\\\CustumHooks2\\\\src\\\\components\\\\NewTask\\\\NewTask.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Section from \"../UI/Section\";\nimport TaskForm from \"./TaskForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTask = props => {\n  _s();\n\n  const transformTask = (taskData, data) => {\n    console.log(taskData, data);\n    const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n\n    const createdTask = {\n      id: generatedId,\n      text: taskData\n    };\n    props.onAddTask(createdTask);\n  };\n\n  const {\n    error,\n    isLoading,\n    sendRequest\n  } = useHttp();\n\n  const enterTaskHandler = async taskText => {\n    sendRequest({\n      url: \"https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json\",\n      method: \"POST\",\n      body: {\n        text: taskText\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }, transformTask.bind(null, taskText));\n    /*  dataFromHook = taskText.slice();\n     console.log(dataFromHook); */\n  };\n  /*  setIsLoading(true);\n    setError(null);\n   \n    try {\n      const response = await fetch(\n        'https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json',\n        {\n          method: 'POST',\n          body: JSON.stringify({ text: taskText }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n       if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n       const data = await response.json();\n       const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n      const createdTask = { id: generatedId, text: taskText };\n       props.onAddTask(createdTask);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  }; */\n\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n      onEnterTask: enterTaskHandler,\n      loading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTask, \"vALwo7lYq3sGPtKIpwIuJzxELnw=\", false, function () {\n  return [useHttp];\n});\n\n_c = NewTask;\nexport default NewTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"sources":["C:/Users/jyoth/Documents/ReactApps/CustumHooks2/src/components/NewTask/NewTask.js"],"names":["useEffect","useState","Section","TaskForm","useHttp","NewTask","props","transformTask","taskData","data","console","log","generatedId","name","createdTask","id","text","onAddTask","error","isLoading","sendRequest","enterTaskHandler","taskText","url","method","body","headers","bind"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAmC,OAAnC;AAEA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AAEzB,QAAMC,aAAa,GAAG,CAACC,QAAD,EAAUC,IAAV,KAAmB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAqBC,IAArB;AACA,UAAMG,WAAW,GAAGH,IAAI,CAACI,IAAzB,CAFuC,CAER;;AAC/B,UAAMC,WAAW,GAAG;AAAEC,MAAAA,EAAE,EAAEH,WAAN;AAAmBI,MAAAA,IAAI,EAAER;AAAzB,KAApB;AAEAF,IAAAA,KAAK,CAACW,SAAN,CAAgBH,WAAhB;AACD,GAND;;AAQA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,MAAoChB,OAAO,EAAjD;;AAIA,QAAMiB,gBAAgB,GAAG,MAAOC,QAAP,IAAoB;AAE3CF,IAAAA,WAAW,CAAC;AACVG,MAAAA,GAAG,EAAE,oFADK;AAEVC,MAAAA,MAAM,EAAE,MAFE;AAGVC,MAAAA,IAAI,EAAE;AAACT,QAAAA,IAAI,EAACM;AAAN,OAHI;AAIVI,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJC,KAAD,EAQXnB,aAAa,CAACoB,IAAd,CAAmB,IAAnB,EAAwBL,QAAxB,CARW,CAAX;AASD;AACH;AACG,GAbD;AAeA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAME,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,WAAW,EAAED,gBAAvB;AAAyC,MAAA,OAAO,EAAEF;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGD,KAAK,iBAAI;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAlED;;GAAMb,O;UAUsCD,O;;;KAVtCC,O;AAoEN,eAAeA,OAAf","sourcesContent":["import { useEffect, useState} from \"react\";\n\nimport Section from \"../UI/Section\";\nimport TaskForm from \"./TaskForm\";\nimport useHttp from \"../hooks/use-http\";\nconst NewTask = (props) => {\n \n  const transformTask = (taskData,data) => {\n    console.log(taskData,data)\n    const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n    const createdTask = { id: generatedId, text: taskData };\n\n    props.onAddTask(createdTask);\n  };\n \n  const { error, isLoading, sendRequest } = useHttp(\n    \n  );\n \n  const enterTaskHandler = async (taskText) => {\n  \n    sendRequest({\n      url: \"https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json\",\n      method: \"POST\",\n      body: {text:taskText},\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    transformTask.bind(null,taskText))\n   /*  dataFromHook = taskText.slice();\n    console.log(dataFromHook); */\n  };\n\n  /*  setIsLoading(true);\n    setError(null);\n   \n    try {\n      const response = await fetch(\n        'https://react-http-cbdbb-default-rtdb.europe-west1.firebasedatabase.app/tasks.json',\n        {\n          method: 'POST',\n          body: JSON.stringify({ text: taskText }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n\n      const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n      const createdTask = { id: generatedId, text: taskText };\n\n      props.onAddTask(createdTask);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  }; */\n\n  return (\n    <Section>\n      <TaskForm onEnterTask={enterTaskHandler} loading={isLoading} />\n      {error && <p>{error}</p>}\n    </Section>\n  );\n};\n\nexport default NewTask;\n"]},"metadata":{},"sourceType":"module"}