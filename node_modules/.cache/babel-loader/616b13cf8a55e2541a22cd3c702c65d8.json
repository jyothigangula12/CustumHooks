{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useHttp = async (requestConfig, getData) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [counter, setCounter] = useState(0);\n\n  const sendRequest = async () => {\n    _s();\n\n    setIsLoading(true);\n    setError(null);\n    const response = {};\n    useEffect(() => {\n      const interval = setInterval(() => {\n        setCounter(prevCounter => prevCounter + 1);\n      }, 1000);\n      return () => clearInterval(interval);\n    }, []);\n\n    try {\n      response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n        headers: requestConfig.headers ? requestConfig.headers : {}\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      getData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n    console.log(error, isLoading, sendRequest);\n  };\n\n  _s(sendRequest, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  return {\n    counter,\n    error,\n    isLoading,\n    sendRequest\n  };\n};\n\n_s2(useHttp, \"CijrZRGeDxKyadnS0JFX2yDoPsM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/jyoth/Documents/ReactApps/CustumHooks2/src/components/hooks/use-http.js"],"names":["useEffect","useState","useHttp","requestConfig","getData","isLoading","setIsLoading","error","setError","counter","setCounter","sendRequest","response","interval","setInterval","prevCounter","clearInterval","fetch","url","method","body","JSON","stringify","headers","ok","Error","data","json","err","message","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,OAAOC,aAAP,EAAsBC,OAAtB,KAAkC;AAAA;;AAAA;;AAC9C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,CAAD,CAAtC;;AAEA,QAAMU,WAAW,GAAG,YAAY;AAAA;;AAC9BL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,UAAMI,QAAQ,GAAG,EAAjB;AACAZ,IAAAA,SAAS,CAAC,MAAI;AACV,YAAMa,QAAQ,GAAEC,WAAW,CAAC,MAAK;AAAEJ,QAAAA,UAAU,CAACK,WAAW,IAAIA,WAAW,GAAG,CAA9B,CAAV;AAClC,OAD0B,EACzB,IADyB,CAA3B;AAEC,aAAM,MAAMC,aAAa,CAACH,QAAD,CAAzB;AACJ,KAJQ,EAIP,EAJO,CAAT;;AAKE,QAAI;AAEED,MAAAA,QAAQ,GAAG,MAAMK,KAAK,CAACd,aAAa,CAACe,GAAf,EACnB;AACEC,QAAAA,MAAM,EAAEhB,aAAa,CAACgB,MAAd,GAAuBhB,aAAa,CAACgB,MAArC,GAA6C,KADvD;AAEEC,QAAAA,IAAI,EAAEjB,aAAa,CAACiB,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAenB,aAAa,CAACiB,IAA7B,CAArB,GAA2D,IAFnE;AAGEG,QAAAA,OAAO,EAAEpB,aAAa,CAACoB,OAAd,GAAuBpB,aAAa,CAACoB,OAArC,GAA+C;AAH1D,OADmB,CAAtB;;AAQP,UAAI,CAACX,QAAQ,CAACY,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAT,EAAnB;AACAvB,MAAAA,OAAO,CAACsB,IAAD,CAAP;AAED,KAjBE,CAiBA,OAAOE,GAAP,EAAY;AACXpB,MAAAA,QAAQ,CAACoB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDvB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAwB,IAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAZ,EAAkBF,SAAlB,EAA6BM,WAA7B;AACD,GAhCD;;AAL8C,KAKxCA,WALwC;;AAsC9C,SAAO;AACHF,IAAAA,OADG;AAEHF,IAAAA,KAFG;AAGHF,IAAAA,SAHG;AAIHM,IAAAA;AAJG,GAAP;AAMH,CA5CD;;IAAMT,O;;AA6CN,eAAeA,OAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useHttp = async (requestConfig, getData) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [counter, setCounter] = useState(0)\r\n  \r\n    const sendRequest = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n     const response = {}\r\n     useEffect(()=>{\r\n         const interval= setInterval(()=> { setCounter(prevCounter => prevCounter + 1)\r\n         },1000)\r\n          return() => clearInterval(interval)\r\n     },[])\r\n       try {\r\n    \r\n             response = await fetch(requestConfig.url ,\r\n                {\r\n                  method: requestConfig.method ? requestConfig.method :'GET',\r\n                  body: requestConfig.body ? JSON.stringify(requestConfig.body)  : null,\r\n                  headers: requestConfig.headers? requestConfig.headers : {}\r\n                })\r\n                    \r\n          \r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      getData(data)\r\n     \r\n    }  catch (err) {\r\n        setError(err.message || 'Something went wrong!');\r\n      }\r\n      setIsLoading(false);\r\n    \r\n      console.log(error,isLoading ,sendRequest)\r\n    }\r\n    return {\r\n        counter,\r\n        error,\r\n        isLoading,\r\n        sendRequest\r\n    }\r\n}\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}